buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
	}
}

// Apply plugin
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

// Minimum version of Java required
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

// Basic project information
group = 'cybermaxke'
archivesBaseName = 'elementarrows-spigot-v1710'
version = '1.0.0-SNAPSHOT'

// Repositories
repositories {
	mavenCentral()

	// Local dependencies
	flatDir {
        dirs 'lib'
    }
}

// Dependencies
dependencies {
	compile 'com.google.code.gson:gson:2.3.1'
	compile project(':elementarrows-common')
	compile name: 'spigot-1.7.10'
}

// Shade the dependencies in the jar
shadowJar {
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	exclude '**/textures/**'
	exclude '**/models/**'

	dependencies {
		include(dependency(':elementarrows-common'))
		include(dependency('com.google.code.gson:gson'))
	}

	classifier = 'release'
}
build.dependsOn(shadowJar)

jar {
	// Classifier
	classifier = ''

	// Exclude textures
	exclude '**/*.png'
	exclude '**/*.db'

	// Exclude empty directories
	includeEmptyDirs = false
}

processResources {
	ext.set('mainclass', 'me.cybermaxke.elementarrows.spigot.v1710.FElementArrows')

	// This will ensure that this task is redone when the versions change.
	inputs.property "name", project.theName
	inputs.property "version", project.version
	inputs.property "identifier", project.theIdentifier
	inputs.property "description", project.theDescription
	inputs.property "projectpage", project.theProjectPage
	inputs.property "authors", project.theAuthors
	inputs.property "credits", project.theCredits

	// Add the main class path
	inputs.property "mainclass", ext.mainclass

	// Replace stuff in plugin.yml, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'plugin.yml'

		// Replace the properties
		expand([
			'name':project.theName,
			'version':project.version,
			'identifier':project.theIdentifier,
			'description':project.theDescription,
			'projectpage':project.theProjectPage,
			'authors':project.theAuthors,
			'credits':project.theCredits,
			'mainclass':ext.mainclass
		])
	}

	// Copy everything else, thats not the plugin.yml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'plugin.yml'
	}
}